KMD
00000000:             ; ;############################################
00000000:             ; ;# Written By: Sam da Costa                 #
00000000:             ; ;# Uni ID: p11469sd                         #
00000000:             ; ;# Exercise:  5                             #
00000000:             ; ;# Purpose: This file demos a timer         #
00000000:             ; ;# Known faults:                            #
00000000:             ; ;# Buttons arent tested during writing to   #
00000000:             ; ;# the LCD. There isnt much I can do about  #
00000000:             ; ;# this until I can use interrupts. I have  #
00000000:             ; ;# tried to minimise some of the overhead   #
00000000:             ; ;# for printing characters to help with this#
00000000:             ; ;############################################
00000000:             ; ; the general strategy of this timer is to increment memory every time the timer passes another
                      ;  hundred
00000000:             ; ; this means i can avoid dividing by incrementing the 'constant' 100 by 100 everytime and check
                      ; ing if the timer is over this value
00000000:             ; INCLUDE ../general/os.s
00000000:             ; ORIGIN &00000000
00000000: EA000007    ; B reset_handler                       ; +0   (00)
00000004: EA00001E    ; B undefined_instruction_handler       ; +4   (04)
00000008: EA000021    ; B svc_handler                         ; +8   (08)
0000000C: EA000044    ; B prefetch_abort_handler              ; +12  (0C)
00000010: EA00004D    ; B data_abort                          ; +16  (10)
00000014: E1A00000    ; NOP                                   ; +20  (14)
00000018: EA000055    ; B IRQ_handler                         ; +24  (18)
0000001C: EA000055    ; B FIQ_handler                         ; +28  (1C)
00000020: 00000104    ; SVC_MAX DEFW &00000104
00000024:             ; reset_handler ; code to reset the proccesor to known state
00000024: E3A00000    ; MOV R0, #0
00000028: E3A01000    ; MOV R1, #0
0000002C: E3A02000    ; MOV R2, #0
00000030: E3A03000    ; MOV R3, #0
00000034: E3A04000    ; MOV R4, #0
00000038: E3A05000    ; MOV R5, #0
0000003C: E3A06000    ; MOV R6, #0
00000040: E3A07000    ; MOV R7, #0
00000044: E3A08000    ; MOV R8, #0
00000048: E3A09000    ; MOV R9, #0
0000004C: E3A0A000    ; MOV R10, #0
00000050: E3A0B000    ; MOV R11, #0
00000054: E3A0C000    ; MOV R12, #0
00000058: E28FDF49    ; ADRL SP, stackend_svc
0000005C: E28DDA02    ; 
00000060: E28F005D    ; ADRL R0, FF
00000064: E2800B09    ; 
00000068: EB0009F0    ; BL printstr   ;blanks screen and resets cursorposx and cursorposy
0000006C: E10F0000    ; MRS  R0, CPSR
00000070: E3C0000F    ; BIC  R0, R0, #&0F
00000074: E121F000    ; MSR CPSR_c, R0
00000078: E28FDF41    ; ADRL SP, stackend_user
0000007C: E28DDA01    ; 
00000080:             ; 
00000080: EA000911    ; B usercode
00000084:             ; 
00000084:             ; ; Jump to user code
00000084:             ; undefined_instruction_handler
00000084: E28F0F51    ; ADRL R0, UndefinedError
00000088: E2800A02    ; 
0000008C: EB0009E7    ; BL printstr
00000090: EA000039    ; B halt
00000094:             ; 
00000094:             ; svc_handler
00000094:             ; ;svcs start at hex 100
00000094: E92D4000    ; PUSH {LR}
00000098: E92D1000    ; PUSH {R12}
0000009C: E51EE004    ; LDR R14, [LR, #-4]
000000A0: E3CEE4FF    ; BIC R14, R14, #&FF000000
000000A4:             ; svc_entry
000000A4: E51FC08C    ; LDR R12, SVC_MAX
000000A8: E15E000C    ; CMP R14, R12
000000AC: 8A000007    ; BHI SVC_unknown
000000B0: E24EEC01    ; SUB R14, R14, #&100 ;normalising base to avoid predefined svcs
000000B4: E08FE10E    ; ADD R14, PC, R14, LSL #2
000000B8: E59EF000    ; LDR PC, [R14, #0]
000000BC:             ; 
000000BC:             ; jump_t
000000BC: 000000D0    ; DEFW SVC_0 ;halt
000000C0: 000000D4    ; DEFW SVC_1 ;printstr
000000C4: 000000F0    ; DEFW SVC_2 ;timer
000000C8: 0000010C    ; DEFW SVC_3 ;buttons
000000CC: 00000120    ; DEFW SVC_4
000000D0:             ; ; Move back to usercode
000000D0:             ; ; MOVS PC, LR ; special case
000000D0:             ; SVC_0
000000D0:             ; SVC_unknown
000000D0: EA000029    ; B halt
000000D4:             ; SVC_1
000000D4: EB0009D5    ; BL printstr
000000D8: E8BD1000    ; POP{R12}
000000DC: E8BD4000    ; POP{LR}
000000E0: E1B0F00E    ; MOVS PC, LR
000000E4: EA000024    ; B halt
000000E8:             ; 
000000E8: F1001010    ; addr_timer          DEFW 0xF1001010
000000EC: F1003000    ; addr_ABCDButtons    DEFW 0xF1003000
000000F0:             ; SVC_2 ;move timer into R0
000000F0: E92D003E    ; PUSH {R1 - R5}
000000F4: E51F1014    ; LDR R1, addr_timer
000000F8: E5110000    ; LDR R0, [R1] ; I know that this should be LDRB, however for some reason this causes a data abor
                      ; t
000000FC: E8BD003E    ; POP{R1 - R5}
00000100: E8BD1000    ; POP {R12}
00000104: E8BD4000    ; POP {LR}
00000108: E1B0F00E    ; MOVS PC, LR
0000010C:             ; 
0000010C:             ; SVC_3 ; move the ABCD buttons into R0
0000010C: E51F0028    ; LDR R0, addr_ABCDButtons
00000110: E5100000    ; LDR R0, [R0]
00000114: E8BD1000    ; POP {R12}
00000118: E8BD4000    ; POP {LR}
0000011C: E1B0F00E    ; MOVS PC, LR
00000120:             ; SVC_4
00000120: EA000015    ; B halt
00000124:             ; 
00000124:             ; prefetch_abort_handler
00000124: E28F009B    ; ADRL R0, CR
00000128: E2800C23    ; 
0000012C: EB0009BF    ; BL printstr
00000130: E28F0089    ; ADRL R0, LF
00000134: E2800C23    ; 
00000138: EB0009BC    ; BL printstr
0000013C: E28F0048    ; ADRL R0, MemoryError_pre
00000140: E2800A02    ; 
00000144: EB0009B9    ; BL printstr
00000148: EA00000B    ; B halt
0000014C:             ; 
0000014C:             ; data_abort
0000014C: E28F0073    ; ADRL R0, CR
00000150: E2800C23    ; 
00000154: EB0009B5    ; BL printstr
00000158: E28F0061    ; ADRL R0, LF
0000015C: E2800C23    ; 
00000160: EB0009B2    ; BL printstr
00000164: E28F0044    ; ADRL R0, MemoryError_dat
00000168: E2800A02    ; 
0000016C: EB0009AF    ; BL printstr
00000170: EA000001    ; B halt
00000174:             ; 
00000174:             ; IRQ_handler
00000174: EA000000    ; B halt
00000178:             ; 
00000178:             ; FIQ_handler
00000178: EAFFFFFF    ; B halt
0000017C:             ; 
0000017C:             ; halt
0000017C: E1A00000    ; MOV R0, R0
00000180: EAFFFFFD    ; B halt
00000184:             ; ALIGN
00000184:             ; stack_user DEFS &1000
00001184:             ; stackend_user
00001184:             ; stack_svc DEFS &1000
00002184:             ; stackend_svc
00002184:             ; ALIGN
00002184:             ; data
00002184: 00000000    ; cursorposx      DEFW 0
00002188: 00000000    ; cursorposy      DEFW 0
0000218C:             ; ALIGN
0000218C:             ; ALIGN
0000218C: 4D 65 6D 6F ; MemoryError_pre     DEFB "Memory Error has occured (Prefetch)",0
00002190: 72 79 20 45 ; 
00002194: 72 72 6F 72 ; 
00002198: 20 68 61 73 ; 
0000219C: 20 6F 63 63 ; 
000021A0: 75 72 65 64 ; 
000021A4: 20 28 50 72 ; 
000021A8: 65 66 65 74 ; 
000021AC: 63 68 29 00 ; 
000021B0: 4D 65 6D 6F ; MemoryError_dat     DEFB "Memory Error has occured (Data)",0
000021B4: 72 79 20 45 ; 
000021B8: 72 72 6F 72 ; 
000021BC: 20 68 61 73 ; 
000021C0: 20 6F 63 63 ; 
000021C4: 75 72 65 64 ; 
000021C8: 20 28 44 61 ; 
000021CC: 74 61 29 00 ; 
000021D0:             ; ALIGN
000021D0: 55 6E 64 65 ; UndefinedError  DEFB "Undefined Instruction encountered",0
000021D4: 66 69 6E 65 ; 
000021D8: 64 20 49 6E ; 
000021DC: 73 74 72 75 ; 
000021E0: 63 74 69 6F ; 
000021E4: 6E 20 65 6E ; 
000021E8: 63 6F 75 6E ; 
000021EC: 74 65 72 65 ; 
000021F0: 64 00       ; 
000021F4:             ; ALIGN
000021F4:             ; INCLUDE characterDefinitions.s
000021F4: 00 00 00 00 ; font_32 defb 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000021F8: 00 00 00    ; 
000021FB: 5F 00 00 00 ; font_33 defb 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000021FF: 00 00 00    ; 
00002202: 03 00 03 00 ; font_34 defb 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00
00002206: 00 00 00    ; 
00002209: 14 7F 14 7F ; font_35 defb 0x14, 0x7f, 0x14, 0x7f, 0x14, 0x00, 0x00
0000220D: 14 00 00    ; 
00002210: 6F 49 C9 7B ; font_36 defb 0x6f, 0x49, 0xc9, 0x7b, 0x00, 0x00, 0x00
00002214: 00 00 00    ; 
00002217: 63 13 08 64 ; font_37 defb 0x63, 0x13, 0x08, 0x64, 0x63, 0x00, 0x00
0000221B: 63 00 00    ; 
0000221E: 7F C9 49 63 ; font_38 defb 0x7f, 0xc9, 0x49, 0x63, 0x00, 0x00, 0x00
00002222: 00 00 00    ; 
00002225: 03 00 00 00 ; font_39 defb 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00002229: 00 00 00    ; 
0000222C: 3E 41 00 00 ; font_40 defb 0x3e, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00
00002230: 00 00 00    ; 
00002233: 41 3E 00 00 ; font_41 defb 0x41, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00
00002237: 00 00 00    ; 
0000223A: 0A 04 1F 04 ; font_42 defb 0x0a, 0x04, 0x1f, 0x04, 0x0a, 0x00, 0x00
0000223E: 0A 00 00    ; 
00002241: 08 08 3E 08 ; font_43 defb 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00
00002245: 08 00 00    ; 
00002248: C0 00 00 00 ; font_44 defb 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000224C: 00 00 00    ; 
0000224F: 08 08 08 08 ; font_45 defb 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00
00002253: 00 00 00    ; 
00002256: 40 00 00 00 ; font_46 defb 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000225A: 00 00 00    ; 
0000225D: 60 10 08 04 ; font_47 defb 0x60, 0x10, 0x08, 0x04, 0x03, 0x00, 0x00
00002261: 03 00 00    ; 
00002264: 7F 41 41 7F ; font_48 defb 0x7f, 0x41, 0x41, 0x7f, 0x00, 0x00, 0x00
00002268: 00 00 00    ; 
0000226B: 01 7F 00 00 ; font_49 defb 0x01, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00
0000226F: 00 00 00    ; 
00002272: 7B 49 49 6F ; font_50 defb 0x7b, 0x49, 0x49, 0x6f, 0x00, 0x00, 0x00
00002276: 00 00 00    ; 
00002279: 63 49 49 7F ; font_51 defb 0x63, 0x49, 0x49, 0x7f, 0x00, 0x00, 0x00
0000227D: 00 00 00    ; 
00002280: 0F 08 08 7F ; font_52 defb 0x0f, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x00
00002284: 00 00 00    ; 
00002287: 6F 49 49 7B ; font_53 defb 0x6f, 0x49, 0x49, 0x7b, 0x00, 0x00, 0x00
0000228B: 00 00 00    ; 
0000228E: 7F 49 49 7B ; font_54 defb 0x7f, 0x49, 0x49, 0x7b, 0x00, 0x00, 0x00
00002292: 00 00 00    ; 
00002295: 03 01 01 7F ; font_55 defb 0x03, 0x01, 0x01, 0x7f, 0x00, 0x00, 0x00
00002299: 00 00 00    ; 
0000229C: 7F 49 49 7F ; font_56 defb 0x7f, 0x49, 0x49, 0x7f, 0x00, 0x00, 0x00
000022A0: 00 00 00    ; 
000022A3: 0F 09 09 7F ; font_57 defb 0x0f, 0x09, 0x09, 0x7f, 0x00, 0x00, 0x00
000022A7: 00 00 00    ; 
000022AA: 41 00 00 00 ; font_58 defb 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000022AE: 00 00 00    ; 
000022B1: C1 00 00 00 ; font_59 defb 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000022B5: 00 00 00    ; 
000022B8: 08 14 22 00 ; font_60 defb 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00
000022BC: 00 00 00    ; 
000022BF: 14 14 14 14 ; font_61 defb 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00
000022C3: 00 00 00    ; 
000022C6: 22 14 08 00 ; font_62 defb 0x22, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00
000022CA: 00 00 00    ; 
000022CD: 03 59 09 0F ; font_63 defb 0x03, 0x59, 0x09, 0x0f, 0x00, 0x00, 0x00
000022D1: 00 00 00    ; 
000022D4: 7F 41 5D 55 ; font_64 defb 0x7f, 0x41, 0x5d, 0x55, 0x5f, 0x00, 0x00
000022D8: 5F 00 00    ; 
000022DB: 7F 09 09 7F ; font_65 defb 0x7f, 0x09, 0x09, 0x7f, 0x00, 0x00, 0x00
000022DF: 00 00 00    ; 
000022E2: 7F 49 49 77 ; font_66 defb 0x7f, 0x49, 0x49, 0x77, 0x00, 0x00, 0x00
000022E6: 00 00 00    ; 
000022E9: 7F 41 41 63 ; font_67 defb 0x7f, 0x41, 0x41, 0x63, 0x00, 0x00, 0x00
000022ED: 00 00 00    ; 
000022F0: 7F 41 41 3E ; font_68 defb 0x7f, 0x41, 0x41, 0x3e, 0x00, 0x00, 0x00
000022F4: 00 00 00    ; 
000022F7: 7F 49 49 63 ; font_69 defb 0x7f, 0x49, 0x49, 0x63, 0x00, 0x00, 0x00
000022FB: 00 00 00    ; 
000022FE: 7F 09 09 03 ; font_70 defb 0x7f, 0x09, 0x09, 0x03, 0x00, 0x00, 0x00
00002302: 00 00 00    ; 
00002305: 7F 41 49 7B ; font_71 defb 0x7f, 0x41, 0x49, 0x7b, 0x00, 0x00, 0x00
00002309: 00 00 00    ; 
0000230C: 7F 08 08 7F ; font_72 defb 0x7f, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x00
00002310: 00 00 00    ; 
00002313: 41 7F 41 00 ; font_73 defb 0x41, 0x7f, 0x41, 0x00, 0x00, 0x00, 0x00
00002317: 00 00 00    ; 
0000231A: 60 40 40 7F ; font_74 defb 0x60, 0x40, 0x40, 0x7f, 0x00, 0x00, 0x00
0000231E: 00 00 00    ; 
00002321: 7F 08 08 77 ; font_75 defb 0x7f, 0x08, 0x08, 0x77, 0x00, 0x00, 0x00
00002325: 00 00 00    ; 
00002328: 7F 40 40 60 ; font_76 defb 0x7f, 0x40, 0x40, 0x60, 0x00, 0x00, 0x00
0000232C: 00 00 00    ; 
0000232F: 7F 01 01 7F ; font_77 defb 0x7f, 0x01, 0x01, 0x7f, 0x01, 0x01, 0x7f
00002333: 01 01 7F    ; 
00002336: 7F 01 01 7F ; font_78 defb 0x7f, 0x01, 0x01, 0x7f, 0x00, 0x00, 0x00
0000233A: 00 00 00    ; 
0000233D: 7F 41 41 7F ; font_79 defb 0x7f, 0x41, 0x41, 0x7f, 0x00, 0x00, 0x00
00002341: 00 00 00    ; 
00002344: 7F 09 09 0F ; font_80 defb 0x7f, 0x09, 0x09, 0x0f, 0x00, 0x00, 0x00
00002348: 00 00 00    ; 
0000234B: 7F 41 C1 7F ; font_81 defb 0x7f, 0x41, 0xc1, 0x7f, 0x00, 0x00, 0x00
0000234F: 00 00 00    ; 
00002352: 7F 09 09 77 ; font_82 defb 0x7f, 0x09, 0x09, 0x77, 0x00, 0x00, 0x00
00002356: 00 00 00    ; 
00002359: 6F 49 49 7B ; font_83 defb 0x6f, 0x49, 0x49, 0x7b, 0x00, 0x00, 0x00
0000235D: 00 00 00    ; 
00002360: 01 01 7F 01 ; font_84 defb 0x01, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x00
00002364: 01 00 00    ; 
00002367: 7F 40 40 7F ; font_85 defb 0x7f, 0x40, 0x40, 0x7f, 0x00, 0x00, 0x00
0000236B: 00 00 00    ; 
0000236E: 7F 20 10 0F ; font_86 defb 0x7f, 0x20, 0x10, 0x0f, 0x00, 0x00, 0x00
00002372: 00 00 00    ; 
00002375: 7F 40 40 7F ; font_87 defb 0x7f, 0x40, 0x40, 0x7f, 0x40, 0x40, 0x7f
00002379: 40 40 7F    ; 
0000237C: 77 08 08 77 ; font_88 defb 0x77, 0x08, 0x08, 0x77, 0x00, 0x00, 0x00
00002380: 00 00 00    ; 
00002383: 6F 48 48 7F ; font_89 defb 0x6f, 0x48, 0x48, 0x7f, 0x00, 0x00, 0x00
00002387: 00 00 00    ; 
0000238A: 71 49 49 47 ; font_90 defb 0x71, 0x49, 0x49, 0x47, 0x00, 0x00, 0x00
0000238E: 00 00 00    ; 
00002391: 7F 41 00 00 ; font_91 defb 0x7f, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00
00002395: 00 00 00    ; 
00002398: 03 04 08 10 ; font_92 defb 0x03, 0x04, 0x08, 0x10, 0x60, 0x00, 0x00
0000239C: 60 00 00    ; 
0000239F: 41 7F 00 00 ; font_93 defb 0x41, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00
000023A3: 00 00 00    ; 
000023A6: 04 02 01 02 ; font_94 defb 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00
000023AA: 04 00 00    ; 
000023AD: 80 80 80 80 ; font_95 defb 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00
000023B1: 00 00 00    ; 
000023B4: 03 00 00 00 ; font_96 defb 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000023B8: 00 00 00    ; 
000023BB: 74 54 54 7C ; font_97 defb 0x74, 0x54, 0x54, 0x7c, 0x00, 0x00, 0x00
000023BF: 00 00 00    ; 
000023C2: 7F 44 44 7C ; font_98 defb 0x7f, 0x44, 0x44, 0x7c, 0x00, 0x00, 0x00
000023C6: 00 00 00    ; 
000023C9: 7C 44 44 6C ; font_99 defb 0x7c, 0x44, 0x44, 0x6c, 0x00, 0x00, 0x00
000023CD: 00 00 00    ; 
000023D0: 7C 44 44 7F ; font_100 defb 0x7c, 0x44, 0x44, 0x7f, 0x00, 0x00, 0x00
000023D4: 00 00 00    ; 
000023D7: 7C 54 54 5C ; font_101 defb 0x7c, 0x54, 0x54, 0x5c, 0x00, 0x00, 0x00
000023DB: 00 00 00    ; 
000023DE: 7F 05 05 01 ; font_102 defb 0x7f, 0x05, 0x05, 0x01, 0x00, 0x00, 0x00
000023E2: 00 00 00    ; 
000023E5: BC A4 A4 FC ; font_103 defb 0xbc, 0xa4, 0xa4, 0xfc, 0x00, 0x00, 0x00
000023E9: 00 00 00    ; 
000023EC: 7F 04 04 7C ; font_104 defb 0x7f, 0x04, 0x04, 0x7c, 0x00, 0x00, 0x00
000023F0: 00 00 00    ; 
000023F3: 7D 00 00 00 ; font_105 defb 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000023F7: 00 00 00    ; 
000023FA: 80 FD 00 00 ; font_106 defb 0x80, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00
000023FE: 00 00 00    ; 
00002401: 7F 04 04 7A ; font_107 defb 0x7f, 0x04, 0x04, 0x7a, 0x00, 0x00, 0x00
00002405: 00 00 00    ; 
00002408: 7F 00 00 00 ; font_108 defb 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000240C: 00 00 00    ; 
0000240F: 7C 04 04 7C ; font_109 defb 0x7c, 0x04, 0x04, 0x7c, 0x04, 0x04, 0x7c
00002413: 04 04 7C    ; 
00002416: 7C 04 04 7C ; font_110 defb 0x7c, 0x04, 0x04, 0x7c, 0x00, 0x00, 0x00
0000241A: 00 00 00    ; 
0000241D: 7C 44 44 7C ; font_111 defb 0x7c, 0x44, 0x44, 0x7c, 0x00, 0x00, 0x00
00002421: 00 00 00    ; 
00002424: FC 44 44 7C ; font_112 defb 0xfc, 0x44, 0x44, 0x7c, 0x00, 0x00, 0x00
00002428: 00 00 00    ; 
0000242B: 7C 44 44 FC ; font_113 defb 0x7c, 0x44, 0x44, 0xfc, 0x00, 0x00, 0x00
0000242F: 00 00 00    ; 
00002432: 7C 04 04 0C ; font_114 defb 0x7c, 0x04, 0x04, 0x0c, 0x00, 0x00, 0x00
00002436: 00 00 00    ; 
00002439: 5C 54 54 74 ; font_115 defb 0x5c, 0x54, 0x54, 0x74, 0x00, 0x00, 0x00
0000243D: 00 00 00    ; 
00002440: 7F 44 44 60 ; font_116 defb 0x7f, 0x44, 0x44, 0x60, 0x00, 0x00, 0x00
00002444: 00 00 00    ; 
00002447: 7C 40 40 7C ; font_117 defb 0x7c, 0x40, 0x40, 0x7c, 0x00, 0x00, 0x00
0000244B: 00 00 00    ; 
0000244E: 7C 20 10 0C ; font_118 defb 0x7c, 0x20, 0x10, 0x0c, 0x00, 0x00, 0x00
00002452: 00 00 00    ; 
00002455: 7C 40 40 7C ; font_119 defb 0x7c, 0x40, 0x40, 0x7c, 0x40, 0x40, 0x7c
00002459: 40 40 7C    ; 
0000245C: 6C 10 10 6C ; font_120 defb 0x6c, 0x10, 0x10, 0x6c, 0x00, 0x00, 0x00
00002460: 00 00 00    ; 
00002463: BC A0 A0 FC ; font_121 defb 0xbc, 0xa0, 0xa0, 0xfc, 0x00, 0x00, 0x00
00002467: 00 00 00    ; 
0000246A: 64 54 54 4C ; font_122 defb 0x64, 0x54, 0x54, 0x4c, 0x00, 0x00, 0x00
0000246E: 00 00 00    ; 
00002471: 08 3E 41 00 ; font_123 defb 0x08, 0x3e, 0x41, 0x00, 0x00, 0x00, 0x00
00002475: 00 00 00    ; 
00002478: FF 00 00 00 ; font_124 defb 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000247C: 00 00 00    ; 
0000247F: 41 3E 08 00 ; font_125 defb 0x41, 0x3e, 0x08, 0x00, 0x00, 0x00, 0x00
00002483: 00 00 00    ; 
00002486: 1C 04 1C 10 ; font_126 defb 0x1c, 0x04, 0x1c, 0x10, 0x1c, 0x00, 0x00
0000248A: 1C 00 00    ; 
0000248D:             ; 
0000248D:             ; INCLUDE generalDefinitions.s
00002490:             ; ALIGN
00002490: 01          ; bmask0      DEFB &01
00002491: 02          ; bmask1      DEFB &02
00002492: 04          ; bmask2      DEFB &04
00002493: 08          ; bmask3      DEFB &08
00002494: 10          ; bmask4      DEFB &10
00002495: 20          ; bmask5      DEFB &20
00002496: 40          ; bmask6      DEFB &40
00002497: 80          ; bmask7      DEFB &80
00002498:             ; 
00002498: AC000000    ; addr_LCD        DEFW 0xAC00_0000
0000249C: AC0383FF    ; addr_LCD_end    DEFW 0xAC03_83FF
000024A0: 000003C0    ; LCD_width       DEFW 960
000024A4: 00000018    ; charwidth       DEFW 24
000024A8: 00001E00    ; LCD_linediff    DEFW 7680
000024AC: 00000000    ; WHITE           DEFW     &00
000024B0: 000000FF    ; BLACK           DEFW     &FF
000024B4: 00000007    ; FONT_WIDTH      DEFW     7
000024B8: 00000008    ; FONT_HEIGHT     DEFW     8
000024BC: 00          ; nullstring      DEFB &00
000024BD: 08 00       ; backspace       DEFB &08,0
000024BF: 09 00       ; HT              DEFB &09,0
000024C1: 0A 00       ; LF              DEFB &0A,0
000024C3: 0B 00       ; VT              DEFB &0B,0
000024C5: 0C 00       ; FF              DEFB &0C,0
000024C7: 0D 00       ; CR              DEFB &0D,0
000024C9: 20 00       ; BLANK           DEFB &20,0
000024CC:             ; ALIGN
000024CC:             ; svc_0           EQU &100 ;halt
000024CC:             ; svc_1           EQU &101 ;printstr
000024CC:             ; svc_2           EQU &102 ;get timer
000024CC:             ; svc_3           EQU &103
000024CC:             ; 
000024CC:             ; ALIGN
000024CC:             ; 
000024CC:             ; usercode
000024CC:             ; 
000024CC:             ; 
000024CC: E3A00000    ; MOV R0, #0
000024D0: EB00004C    ; BL bcd_convert
000024D4: EB00006F    ; BL hexprint
000024D8: EF000102    ; SVC svc_2
000024DC: E3A07000    ; MOV R7, #0   ;pos A pushed at
000024E0: E3A06C01    ; MOV R6, #256 ; const
000024E4: E1A01000    ; MOV R1, R0   ; R1 is my base to work from
000024E8: E3A02000    ; MOV R2, #0   ; R2 is my count of overflows
000024EC: E3A03064    ; MOV R3, #100 ; R3 holds the value my count should be higher than to increment the mem address
000024F0:             ;              ; everytime I write to Mem_Inc i should increment R3 by 100
000024F0: E3A04000    ; MOV R4, #0   ; R4 is the current step = (R2 * 256) - R1
000024F4: EB00002F    ; BL wait
000024F8: EF000102    ; SVC svc_2
000024FC:             ; loop
000024FC: E1A05000    ; MOV R5, R0   ; R5 is my last timer var
00002500:             ; ;check for IO while R0 is free
00002500: EF000103    ; SVC svc_3
00002504: E2000002    ; AND R0, R0, #00000002
00002508: E3500002    ; CMP R0, #00000002
0000250C: 0B000029    ; BLEQ wait ;this probably wont detect every push of the button, but it is the best I can do usin
                      ; g Polling
00002510:             ;           ;with and interrupts, this would be much more accurate
00002510:             ; 
00002510:             ; ; check if A still pushed if (R7 + 1000 > current time) and (R7 != 0)
00002510:             ; ; if not pushed R7 <= 0
00002510:             ; ; else set mem to 0
00002510:             ; ; if a pushed R7 <= R4
00002510:             ; ; (NOTE: I think this works, but I am unsure as the simulation runs too fast for me)
00002510: E92D0001    ; PUSH {R0}
00002514: E3570000    ; CMP R7, #0
00002518: 0A00000B    ; BEQ continue
0000251C: E2877FFA    ; ADD R7, R7, #1000
00002520: E1570004    ; CMP R7, R4
00002524: E2477FFA    ; SUB R7, R7, #1000
00002528: BA000007    ; BLT continue
0000252C:             ; 
0000252C: EF000103    ; SVC svc_3
00002530: E2000001    ; AND R0, R0, #00000001
00002534: E3500001    ; CMP R0, #1
00002538: 1A000002    ; BNE endcountcheck
0000253C: E3A06000    ; MOV R6, #0
00002540: E58F60B4    ; STR R6, Mem_Inc
00002544:             ; 
00002544: EA000000    ; B continue
00002548:             ; endcountcheck
00002548: E3A07000    ; MOV R7, #0
0000254C:             ; 
0000254C:             ; continue
0000254C:             ; 
0000254C: EF000103    ; SVC svc_3
00002550: E2000001    ; AND R0, R0, #00000001
00002554: E3500001    ; CMP R0, #1
00002558: 01A07004    ; MOVEQ R7, R4
0000255C: E8BD0001    ; POP {R0}
00002560:             ; ; End of psuedo code described in comment above
00002560:             ; 
00002560:             ; 
00002560: EF000102    ; SVC svc_2
00002564: E1550000    ; CMP R5, R0
00002568: AA000000    ; BGE tests
0000256C:             ; 
0000256C:             ; overflow
0000256C: E2822001    ; ADD R2, R2, #1
00002570:             ; tests
00002570: E3A06C01    ; MOV R6, #256
00002574: E0040692    ; MUL R4, R2, R6
00002578: E0444001    ; SUB R4, R4, R1
0000257C: E0844000    ; ADD R4, R4, R0 ;current step in R4
00002580: E1520003    ; CMP R2, R3     ;if R2 > R3 add to mem else keep checking
00002584: BAFFFFDC    ; BLT loop
00002588:             ; ;increment mem
00002588: E59F606C    ; LDR R6, Mem_Inc
0000258C: E2866001    ; ADD R6, R6, #1
00002590: E58F6064    ; STR R6, Mem_Inc
00002594: E2833064    ; ADD R3, R3, #100
00002598:             ; ;print memory location
00002598: E92D0001    ; PUSH {R0}
0000259C: E28F005C    ; ADR R0, wipeline
000025A0: EF000101    ; SVC svc_1
000025A4: E1A00006    ; MOV R0, R6
000025A8: EB000016    ; BL bcd_convert
000025AC: EB000039    ; BL hexprint
000025B0: E8BD0001    ; POP {R0}
000025B4: EAFFFFD0    ; B loop
000025B8:             ; 
000025B8:             ; wait ;you progress through this section once the button has been unpushed, pushed and then unpu
                      ; shed
000025B8: E92D0001    ; PUSH {R0}
000025BC:             ; unpush
000025BC: EF000103    ; SVC svc_3
000025C0: E2000002    ; AND R0, R0, #00000002
000025C4: E3500000    ; CMP R0, #00000000
000025C8: 1AFFFFFB    ; BNE unpush
000025CC:             ; 
000025CC:             ; waitloop
000025CC: EF000103    ; SVC svc_3
000025D0: E2000002    ; AND R0, R0, #00000002
000025D4: E3500002    ; CMP R0, #00000002
000025D8: 1AFFFFFB    ; BNE waitloop
000025DC:             ; unpush2
000025DC: EF000103    ; SVC svc_3
000025E0: E2000002    ; AND R0, R0, #00000002
000025E4: E3500000    ; CMP R0, #00000000
000025E8: 1AFFFFFB    ; BNE unpush2
000025EC:             ; 
000025EC:             ; 
000025EC:             ; 
000025EC: E8BD0001    ; POP {R0}
000025F0: E1A0F00E    ; MOV PC, LR
000025F4:             ; 
000025F4:             ; 
000025F4:             ; 
000025F4:             ; 
000025F4:             ; 
000025F4:             ; 
000025F4:             ; 
000025F4:             ; 
000025F4:             ; 
000025F4:             ; 
000025F4:             ; 
000025F4:             ; 
000025F4:             ; ALIGN
000025F4: 00          ; APushed DEFB &00
000025F8:             ; ALIGN
000025F8: 00000000    ; APushedAt DEFW 0
000025FC: 00000000    ; Mem_Inc DEFW 0
00002600: 0000000D    ; wipeline DEFW &0D, 0 ; Move cursor to start
00002604: 00000000    ; 
00002608:             ; 
00002608:             ; INCLUDE ../general/bcdconvert.s
00002608:             ; ;Edited by Sam da Costa to avoid corruption of R1 - R6
00002608:             ; ;Edits are made in caps
00002608:             ; ;-------------------------------------------------------------------------------
00002608:             ; 
00002608:             ; ; Convert unsigned binary value in R0 into BCD representation, returned in R0
00002608:             ; ; Any overflowing digits are generated, but not retained or returned in this
00002608:             ; ;  version.
00002608:             ; ; Corrupts registers R1-R6, inclusive; also R14
00002608:             ; ; Does not require a stack
00002608:             ; 
00002608:             ; bcd_convert
00002608: E92D007E    ;     PUSH {R1-R6}
0000260C: E1A0600E    ;     mov r6, lr                  ; Keep return address
00002610:             ;                                                 ;  in case there is no stack
00002610: E28F402C    ;                 adr     r4, dec_table           ; Point at conversion table
00002614: E3A05000    ;                 mov     r5, #0                  ; Zero accumulator
00002618:             ; 
00002618: E4941004    ; bcd_loop        ldr     r1, [r4], #4            ; Get next divisor, step pointer
0000261C: E3510001    ;                 cmp     r1, #1                  ; Termination condition?
00002620: 0A000003    ;                 beq     bcd_out                 ;  yes
00002624:             ; 
00002624: EB000010    ;                 bl      divide                  ; R0 := R0/R1 (rem. R2)
00002628:             ; 
00002628: E0805205    ;                 add     r5, r0, r5, lsl #4      ; Accumulate result
0000262C: E1A00002    ;                 mov     r0, r2                  ; Recycle remainder
00002630: EAFFFFF8    ;                 b       bcd_loop                ;
00002634:             ; 
00002634: E0800205    ; bcd_out         add     r0, r0, r5, lsl #4      ; Accumulate result to output
00002638: E1A0E006    ;     MOV LR, R6
0000263C: E8BD007E    ;     POP {R1-R6}
00002640: E1A0F00E    ;                 mov     pc, LR                  ; Return
00002644:             ;     ; was mov pc, r6
00002644: 3B9ACA00    ; dec_table       DCD     1000000000, 100000000, 10000000, 1000000
00002648: 05F5E100    ; 
0000264C: 00989680    ; 
00002650: 000F4240    ; 
00002654: 000186A0    ;                 DCD     100000, 10000, 1000, 100, 10, 1
00002658: 00002710    ; 
0000265C: 000003E8    ; 
00002660: 00000064    ; 
00002664: 0000000A    ; 
00002668: 00000001    ; 
0000266C:             ; 
0000266C:             ; ;-------------------------------------------------------------------------------
0000266C:             ; 
0000266C:             ; ; 32-bit unsigned integer division R0/R1
0000266C:             ; ; Returns quotient in R0 and remainder in R2
0000266C:             ; ; R3 is corrupted (will be zero)
0000266C:             ; ; Returns quotient FFFFFFFF in case of division by zero
0000266C:             ; ; Does not require a stack
0000266C:             ; 
0000266C: E3A02000    ; divide          mov     r2, #0                  ; AccH
00002670: E3A03020    ;                 mov     r3, #32                 ; Number of bits in division
00002674: E0900000    ;                 adds    r0, r0, r0              ; Shift dividend
00002678:             ; 
00002678: E0A22002    ; divide1         adc     r2, r2, r2              ; Shift AccH, carry into LSB
0000267C: E1520001    ;                 cmp     r2, r1                  ; Will it go?
00002680: 20422001    ;                 subhs   r2, r2, r1              ; If so, subtract
00002684: E0B00000    ;                 adcs    r0, r0, r0              ; Shift dividend & Acc. result
00002688: E2433001    ;                 sub     r3, r3, #1              ; Loop count
0000268C: E1130003    ;                 tst     r3, r3                  ; Leaves carry alone
00002690: 1AFFFFF8    ;                 bne     divide1                 ; Repeat as required
00002694:             ; 
00002694: E1A0F00E    ;                 mov     pc, lr                  ; Return
00002698:             ; 
00002698:             ; ;-------------------------------------------------------------------------------
00002698:             ; 
00002698:             ; INCLUDE ../general/hexprint.s
00002698:             ; 
00002698:             ; ; Num to print in R0
00002698:             ; hexprint ; prints half a word
00002698: E92D0006    ; PUSH {R1 - R2}
0000269C: E3A02000    ; MOV R2, #0 ;used for rotating
000026A0: E0820660    ; ADD R0, R2, R0, ROR #12
000026A4: E92D4000    ; PUSH {LR}
000026A8: EB000008    ; BL hexprint_sub
000026AC: E0820E60    ; ADD R0, R2, R0, ROR #28 ;not space efficient, but using a loop would increase processing time a
                      ; nd waste a register
000026B0: EB000006    ; BL hexprint_sub
000026B4: E0820E60    ; ADD R0, R2, R0, ROR #28
000026B8: EB000004    ; BL hexprint_sub
000026BC: E0820E60    ; ADD R0, R2, R0, ROR #28
000026C0: EB000002    ; BL hexprint_sub
000026C4: E8BD4000    ; POP {LR}
000026C8: E8BD0006    ; POP{R1 - R2}
000026CC: E1A0F00E    ; MOV PC, LR
000026D0:             ; 
000026D0:             ; 
000026D0:             ; hexprint_sub ; only corrupts then restores R1
000026D0: E92D0002    ; PUSH {R1}
000026D4: E1A01000    ; MOV R1, R0 ; save R0
000026D8: E200000F    ; AND R0, R0, #&0000000F ;clear unused bits
000026DC: E3500009    ; CMP R0, #9
000026E0: C2800037    ; ADDGT R0, R0, #55 ;offset to get character
000026E4: D2800030    ; ADDLE R0, R0, #48 ;offset to get character
000026E8:             ; ;I realise now that my printc function doesnt work exactly as I thought it would
000026E8:             ; ;For it to work correctly it needs to be run within printstr i think
000026E8:             ; ;The following code is a work around so that I can use printstr instead as printstr works corre
                      ; ctly
000026E8:             ; ;It stores it to a location with a null 0 in the next byte so it can be read as a null terminat
                      ; ed string
000026E8:             ; ;I would fix my printc function, but I am running out of time
000026E8: E5CF0018    ; STRB R0, tempCharPos
000026EC: E28F0014    ; ADRL R0, tempCharPos
000026F0: E92D4000    ; PUSH {LR}
000026F4: EF000101    ; SVC svc_1
000026F8: E8BD4000    ; POP {LR}
000026FC:             ; 
000026FC: E1A00001    ; MOV R0, R1
00002700: E8BD0002    ; POP {R1}
00002704: E1A0F00E    ; MOV PC, LR
00002708:             ; 
00002708: 00          ; tempCharPos DEFB 0
00002709: 00          ; nullchar DEFB 0
0000270A:             ; 
0000270A:             ; INCLUDE ../general/lcd.s
0000270A:             ; ;###############################################
0000270A:             ; ;# Written By: Sam da Costa                    #
0000270A:             ; ;# Uni ID: p11469sd                            #
0000270A:             ; ;# Exercise:  3                                #
0000270A:             ; ;# Purpose: This file contains the subroutines #
0000270A:             ; ;# printc and printstr to enable terminal      #
0000270A:             ; ;# printing                                    #
0000270A:             ; ;###############################################
0000270A:             ; 
0000270C:             ; ALIGN
0000270C:             ; printc
0000270C:             ; ;takes parameter R0 <- address of character
0000270C:             ; ;leaf procedure
0000270C: E92D1FFE    ; PUSH {R1 - R12}
00002710:             ; ;setup
00002710: E51F1594    ; LDR         R1, cursorposx
00002714: E51F2594    ; LDR         R2, cursorposy
00002718: E3A03000    ; MOV         R3, #0
0000271C: E3E04000    ; MOV         R4, #-1
00002720: E24F6FA6    ; ADRL        R6, bmask0
00002724:             ; ; Corrects cursors for newline if needed
00002724: E3510028    ; CMP         R1, #40
00002728: A2411028    ; SUBGE       R1, R1, #40
0000272C: A2822001    ; ADDGE       R2, R2, #1
00002730:             ; ;calculates base address to draw from
00002730: E51F8290    ; LDR         R8, LCD_linediff
00002734: E0080298    ; MUL         R8, R8, R2
00002738: E51F929C    ; LDR         R9, charwidth
0000273C: E0090199    ; MUL         R9, R9, R1
00002740: E0888009    ; ADD         R8, R8, R9
00002744: E51F92B4    ; LDR         R9, addr_LCD
00002748: E0888009    ; ADD         R8, R8, R9        ;base now in R8, R9 free
0000274C:             ; ;----
0000274C:             ; ;handles incrememts of byte and bit
0000274C:             ; ;this procedure uses byte and bit as x and y respectively
0000274C:             ; next
0000274C: E3540007    ; CMP         R4, #7
00002750: 03A04000    ; MOVEQ       R4, #0
00002754: 02833001    ; ADDEQ       R3, R3, #1
00002758: 12844001    ; ADDNE       R4, R4, #1
0000275C: E3530007    ; CMP         R3, #7
00002760: 0A000015    ; BEQ         POSTEND
00002764:             ; 
00002764:             ; 
00002764:             ; 
00002764:             ; 
00002764:             ; 
00002764: E7D05003    ; LDRB        R5, [R0, R3] ;loads the font byte
00002768: E7D67004    ; LDRB        R7, [R6, R4] ;loads the mask
0000276C: E0075005    ; AND         R5, R7, R5 ; check the bit
00002770:             ; 
00002770:             ; ;calculates address to write to
00002770: E3A09003    ; MOV         R9, #3
00002774: E0090399    ; MUL         R9, R9, R3
00002778: E51FA2E0    ; LDR         R10, LCD_width
0000277C: E00A049A    ; MUL         R10, R10, R4
00002780: E089900A    ; ADD         R9, R9, R10
00002784: E0899008    ; ADD         R9, R9, R8      ;address to write in R9
00002788:             ; 
00002788: E1550007    ; CMP         R5, R7 ;determine which colour to draw in
0000278C: 0A000000    ; BEQ high
00002790: 1A000004    ; BNE low
00002794:             ; 
00002794:             ; high ;no colour support yet - this would need to be changed
00002794: E55FA2F0    ; LDRB R10, WHITE
00002798: E4C9A001    ; STRB R10, [R9], #1
0000279C: E4C9A001    ; STRB R10, [R9], #1
000027A0: E549A000    ; STRB R10, [R9]
000027A4: EAFFFFE8    ; B next
000027A8:             ; 
000027A8:             ; low
000027A8: E55FA300    ; LDRB R10, BLACK
000027AC: E4C9A001    ; STRB R10, [R9], #1
000027B0: E4C9A001    ; STRB R10, [R9], #1
000027B4: E549A000    ; STRB R10, [R9]
000027B8: EAFFFFE3    ; B next
000027BC:             ; 
000027BC:             ; POSTEND
000027BC:             ; ;draws the 8th blank line
000027BC: E3A0A003    ; MOV   R10, #3
000027C0: E009039A    ; MUL   R9, R10, R3
000027C4: E51FA32C    ; LDR   R10, LCD_width
000027C8: E00A049A    ; MUL   R10, R10, R4
000027CC: E089900A    ; ADD   R9, R9, R10
000027D0: E51FA340    ; LDR   R10, addr_LCD
000027D4: E089900A    ; ADD   R9, R9, R10
000027D8: E51FB33C    ; LDR   R11, charwidth
000027DC: E00A0B91    ; MUL   R10, R1, R11
000027E0: E08A9009    ; ADD   R9, R10, R9
000027E4: E51FB344    ; LDR   R11, LCD_linediff
000027E8: E00A0B92    ; MUL   R10, R2, R11
000027EC: E08A9009    ; ADD   R9, R10, R9
000027F0:             ; 
000027F0: E55FA348    ; LDRB  R10, BLACK
000027F4: E4C9A001    ; STRB  R10, [R9], #1
000027F8: E4C9A001    ; STRB  R10, [R9], #1
000027FC: E549A000    ; STRB  R10, [R9]
00002800: E2844001    ; ADD   R4, R4, #1
00002804: E3540008    ; CMP   R4, #8 ;re-uses bit counter reg
00002808: 1AFFFFEB    ; BNE POSTEND
0000280C:             ; 
0000280C:             ; ;update cursor positions below
0000280C: E2811001    ; ADD   R1, R1, #1
00002810: E24FCFA5    ; ADRL  R12, cursorposx
00002814: E24CCB01    ; 
00002818: E50C1000    ; STR   R1, [R12]
0000281C: E24FCFA7    ; ADRL  R12, cursorposy
00002820: E24CCB01    ; 
00002824: E50C2000    ; STR   R2, [R12]
00002828:             ; 
00002828:             ; 
00002828:             ; 
00002828:             ; ;return to program
00002828: E8BD1FFE    ; POP {R1 - R12}
0000282C: E1A0F00E    ; MOV PC, LR
00002830:             ; 
00002830:             ; ALIGN
00002830:             ; printstr
00002830:             ; ; address at R0
00002830:             ; ; assume LR was pushed
00002830: E92D01FE    ; PUSH {R1 - R8}
00002834: E92D4000    ; PUSH {LR}
00002838: E1A08000    ; MOV           R8, R0        ; R0 will be overwritten soon
0000283C:             ; printnextc
0000283C: E4D81001    ; LDRB          R1, [R8], #1  ; get the next character
00002840: E2512020    ; SUBS          R2, R1, #&20  ; subtract to get the ascii value to a known base
00002844: BA000006    ; BLT control                 ; if branch taken: char is a control symbol else: char is an ascii 
                      ; character
00002848: E24F3F97    ; ADRL          R3, font_32
0000284C: E2433B01    ; 
00002850: E3A04007    ; MOV           R4, #7
00002854: E0020492    ; MUL           R2, R2, R4    ; calculate offset to correct font
00002858: E0830002    ; ADD           R0, R3, R2
0000285C: EBFFFFAA    ; BL printc
00002860: EAFFFFF5    ; B printnextc
00002864:             ; 
00002864:             ; 
00002864:             ; ; determines which control code needs executing
00002864:             ; control
00002864: E3510000    ; CMP           R1, #00
00002868: 0A000048    ; BEQ           exitstring      ; terminate if 0 seen
0000286C:             ; 
0000286C: E3510008    ; CMP           R1, #&08
00002870: 0A000009    ; BEQ           c_backspace
00002874:             ; 
00002874: E3510009    ; CMP           R1, #&09
00002878: 0A000017    ; BEQ           c_HT
0000287C:             ; 
0000287C: E351000A    ; CMP           R1, #&0A
00002880: 0A000021    ; BEQ           c_LF
00002884:             ; 
00002884: E351000B    ; CMP           R1, #&0B
00002888: 0A000026    ; BEQ           c_VT
0000288C:             ; 
0000288C: E351000C    ; CMP           R1, #&0C
00002890: 0A00002B    ; BEQ           c_FF
00002894:             ; 
00002894: E351000D    ; CMP           R1, #&0D
00002898: 0A000037    ; BEQ           c_CR
0000289C:             ; 
0000289C:             ; 
0000289C:             ; ;the following methods change the cursorposx, cursorposy values
0000289C:             ; ;such that the cursor is in the correct position after a control code
0000289C:             ; ;using R5,6,7
0000289C:             ; c_backspace
0000289C: E51F5720    ; LDR     R5, cursorposx
000028A0: E51F6720    ; LDR     R6, cursorposy
000028A4: E3550000    ; CMP     R5, #0
000028A8: 1A000004    ; BNE     subtract
000028AC: E3560000    ; CMP     R6, #0
000028B0: 0A000003    ; BEQ     quitcontrol
000028B4: E2466001    ; SUB     R6, R6, #1
000028B8: E3A05027    ; MOV     R5, #39
000028BC: EA000000    ; B quitcontrol
000028C0:             ; 
000028C0:             ; subtract
000028C0: E2455001    ; SUB     R5, R5, #1
000028C4:             ; quitcontrol
000028C4: E24F7FD2    ; ADRL    R7, cursorposx
000028C8: E2477B01    ; 
000028CC: E5075000    ; STR     R5, [R7]
000028D0: E24F7E75    ; ADRL    R7, cursorposy
000028D4: E5076000    ; STR     R6, [R7]
000028D8: EAFFFFD7    ; B printnextc
000028DC:             ; 
000028DC:             ; c_HT
000028DC: E51F5760    ; LDR     R5, cursorposx
000028E0: E51F6760    ; LDR     R6, cursorposy
000028E4: E2855001    ; ADD     R5, R5, #1
000028E8: E3550028    ; CMP     R5, #40
000028EC: A2455028    ; SUBGE   R5, R5, #40
000028F0: A2866001    ; ADDGE   R6, R6, #1
000028F4: E24F7FDE    ; ADRL    R7, cursorposx
000028F8: E2477B01    ; 
000028FC: E5075000    ; STR     R5, [R7]
00002900: E24F7D1E    ; ADRL    R7, cursorposy
00002904: E5076000    ; STR     R6, [R7]
00002908: EAFFFFCB    ; B printnextc
0000290C:             ; 
0000290C:             ; c_LF
0000290C: E51F678C    ; LDR     R6, cursorposy
00002910: E356001D    ; CMP     R6, #29
00002914: 12866001    ; ADDNE   R6, R6, #1
00002918: E24F7FE6    ; ADRL    R7, cursorposy
0000291C: E2477B01    ; 
00002920: E5076000    ; STR     R6, [R7]
00002924: EAFFFFC4    ; B printnextc
00002928:             ; 
00002928:             ; c_VT
00002928: E51F67A8    ; LDR     R6, cursorposy
0000292C: E3560000    ; CMP     R6, #0
00002930: C2466001    ; SUBGT   R6, R6, #1
00002934: E24F7FED    ; ADRL    R7, cursorposy
00002938: E2477B01    ; 
0000293C: E5076000    ; STR     R6, [R7]
00002940: EAFFFFBD    ; B printnextc
00002944:             ; 
00002944:             ; c_FF
00002944: E51F54B4    ; LDR     R5, addr_LCD
00002948: E55F64A0    ; LDRB    R6, BLACK
0000294C: E51F74B8    ; LDR     R7, addr_LCD_end
00002950:             ; screenblankloop
00002950: E4C56001    ; STRB    R6, [R5], #1
00002954: E1550007    ; CMP     R5, R7
00002958: 1AFFFFFC    ; BNE screenblankloop
0000295C: E3A05000    ; MOV     R5, #0
00002960: E24F6FF9    ; ADRL    R6, cursorposx
00002964: E2466B01    ; 
00002968: E5065000    ; STR     R5, [R6]
0000296C: E24F6FFB    ; ADRL    R6, cursorposy
00002970: E2466B01    ; 
00002974: E5065000    ; STR     R5, [R6]
00002978: EAFFFFAF    ; B printnextc
0000297C:             ; 
0000297C:             ; c_CR
0000297C: E3A06000    ; MOV     R6, #0
00002980: E24F7004    ; ADRL    R7, cursorposx
00002984: E2477B02    ; 
00002988: E5076000    ; STR     R6, [R7]
0000298C: EAFFFFAA    ; B printnextc
00002990:             ; 
00002990:             ; ; cleanup and exit
00002990:             ; exitstring
00002990: E8BD4000    ; POP {LR}
00002994: E8BD01FE    ; POP {R1 - R8}
00002998: E1A0F00E    ; MOV PC, LR
0000299C:             ; 
0000299C:             ; 
0000299C:             ; 
0000299C:             ; ;---------------------------------------
0000299C:             ; ;  DEFINITIONS
0000299C:             ; ;---------------------------------------
0000299C:             ; 
0000299C:             ; 
0000299C:             ; 
0000299C:             ; 
0000299C:             ; 
0000299C:             ; 
0000299C:             ; 
0000299C:             ; 
0000299C:             ; align
0000299C:             ; 
0000299C:             ; 

Symbol Table: Labels
: SVC_MAX                           00000020  Local -- ARM
: reset_handler                     00000024  Local -- ARM
: undefined_instruction_handler     00000084  Local -- ARM
: svc_handler                       00000094  Local -- ARM
: svc_entry                         000000A4  Local -- ARM
: jump_t                            000000BC  Local -- ARM
: SVC_0                             000000D0  Local -- ARM
: SVC_unknown                       000000D0  Local -- ARM
: SVC_1                             000000D4  Local -- ARM
: addr_timer                        000000E8  Local -- ARM
: addr_ABCDButtons                  000000EC  Local -- ARM
: SVC_2                             000000F0  Local -- ARM
: SVC_3                             0000010C  Local -- ARM
: SVC_4                             00000120  Local -- ARM
: prefetch_abort_handler            00000124  Local -- ARM
: data_abort                        0000014C  Local -- ARM
: IRQ_handler                       00000174  Local -- ARM
: FIQ_handler                       00000178  Local -- ARM
: halt                              0000017C  Local -- ARM
: stack_user                        00000184  Local -- ARM
: stackend_user                     00001184  Local -- ARM
: stack_svc                         00001184  Local -- ARM
: stackend_svc                      00002184  Local -- ARM
: data                              00002184  Local -- ARM
: cursorposx                        00002184  Local -- ARM
: cursorposy                        00002188  Local -- ARM
: MemoryError_pre                   0000218C  Local -- ARM
: MemoryError_dat                   000021B0  Local -- ARM
: UndefinedError                    000021D0  Local -- ARM
: font_32                           000021F4  Local -- ARM
: font_33                           000021FB  Local -- ARM
: font_34                           00002202  Local -- ARM
: font_35                           00002209  Local -- ARM
: font_36                           00002210  Local -- ARM
: font_37                           00002217  Local -- ARM
: font_38                           0000221E  Local -- ARM
: font_39                           00002225  Local -- ARM
: font_40                           0000222C  Local -- ARM
: font_41                           00002233  Local -- ARM
: font_42                           0000223A  Local -- ARM
: font_43                           00002241  Local -- ARM
: font_44                           00002248  Local -- ARM
: font_45                           0000224F  Local -- ARM
: font_46                           00002256  Local -- ARM
: font_47                           0000225D  Local -- ARM
: font_48                           00002264  Local -- ARM
: font_49                           0000226B  Local -- ARM
: font_50                           00002272  Local -- ARM
: font_51                           00002279  Local -- ARM
: font_52                           00002280  Local -- ARM
: font_53                           00002287  Local -- ARM
: font_54                           0000228E  Local -- ARM
: font_55                           00002295  Local -- ARM
: font_56                           0000229C  Local -- ARM
: font_57                           000022A3  Local -- ARM
: font_58                           000022AA  Local -- ARM
: font_59                           000022B1  Local -- ARM
: font_60                           000022B8  Local -- ARM
: font_61                           000022BF  Local -- ARM
: font_62                           000022C6  Local -- ARM
: font_63                           000022CD  Local -- ARM
: font_64                           000022D4  Local -- ARM
: font_65                           000022DB  Local -- ARM
: font_66                           000022E2  Local -- ARM
: font_67                           000022E9  Local -- ARM
: font_68                           000022F0  Local -- ARM
: font_69                           000022F7  Local -- ARM
: font_70                           000022FE  Local -- ARM
: font_71                           00002305  Local -- ARM
: font_72                           0000230C  Local -- ARM
: font_73                           00002313  Local -- ARM
: font_74                           0000231A  Local -- ARM
: font_75                           00002321  Local -- ARM
: font_76                           00002328  Local -- ARM
: font_77                           0000232F  Local -- ARM
: font_78                           00002336  Local -- ARM
: font_79                           0000233D  Local -- ARM
: font_80                           00002344  Local -- ARM
: font_81                           0000234B  Local -- ARM
: font_82                           00002352  Local -- ARM
: font_83                           00002359  Local -- ARM
: font_84                           00002360  Local -- ARM
: font_85                           00002367  Local -- ARM
: font_86                           0000236E  Local -- ARM
: font_87                           00002375  Local -- ARM
: font_88                           0000237C  Local -- ARM
: font_89                           00002383  Local -- ARM
: font_90                           0000238A  Local -- ARM
: font_91                           00002391  Local -- ARM
: font_92                           00002398  Local -- ARM
: font_93                           0000239F  Local -- ARM
: font_94                           000023A6  Local -- ARM
: font_95                           000023AD  Local -- ARM
: font_96                           000023B4  Local -- ARM
: font_97                           000023BB  Local -- ARM
: font_98                           000023C2  Local -- ARM
: font_99                           000023C9  Local -- ARM
: font_100                          000023D0  Local -- ARM
: font_101                          000023D7  Local -- ARM
: font_102                          000023DE  Local -- ARM
: font_103                          000023E5  Local -- ARM
: font_104                          000023EC  Local -- ARM
: font_105                          000023F3  Local -- ARM
: font_106                          000023FA  Local -- ARM
: font_107                          00002401  Local -- ARM
: font_108                          00002408  Local -- ARM
: font_109                          0000240F  Local -- ARM
: font_110                          00002416  Local -- ARM
: font_111                          0000241D  Local -- ARM
: font_112                          00002424  Local -- ARM
: font_113                          0000242B  Local -- ARM
: font_114                          00002432  Local -- ARM
: font_115                          00002439  Local -- ARM
: font_116                          00002440  Local -- ARM
: font_117                          00002447  Local -- ARM
: font_118                          0000244E  Local -- ARM
: font_119                          00002455  Local -- ARM
: font_120                          0000245C  Local -- ARM
: font_121                          00002463  Local -- ARM
: font_122                          0000246A  Local -- ARM
: font_123                          00002471  Local -- ARM
: font_124                          00002478  Local -- ARM
: font_125                          0000247F  Local -- ARM
: font_126                          00002486  Local -- ARM
: bmask0                            00002490  Local -- ARM
: bmask1                            00002491  Local -- ARM
: bmask2                            00002492  Local -- ARM
: bmask3                            00002493  Local -- ARM
: bmask4                            00002494  Local -- ARM
: bmask5                            00002495  Local -- ARM
: bmask6                            00002496  Local -- ARM
: bmask7                            00002497  Local -- ARM
: addr_LCD                          00002498  Local -- ARM
: addr_LCD_end                      0000249C  Local -- ARM
: LCD_width                         000024A0  Local -- ARM
: charwidth                         000024A4  Local -- ARM
: LCD_linediff                      000024A8  Local -- ARM
: WHITE                             000024AC  Local -- ARM
: BLACK                             000024B0  Local -- ARM
: FONT_WIDTH                        000024B4  Local -- ARM
: FONT_HEIGHT                       000024B8  Local -- ARM
: nullstring                        000024BC  Local -- ARM
: backspace                         000024BD  Local -- ARM
: HT                                000024BF  Local -- ARM
: LF                                000024C1  Local -- ARM
: VT                                000024C3  Local -- ARM
: FF                                000024C5  Local -- ARM
: CR                                000024C7  Local -- ARM
: BLANK                             000024C9  Local -- ARM
: svc_0                             00000100  Value
: svc_1                             00000101  Value
: svc_2                             00000102  Value
: svc_3                             00000103  Value
: usercode                          000024CC  Local -- ARM
: loop                              000024FC  Local -- ARM
: endcountcheck                     00002548  Local -- ARM
: continue                          0000254C  Local -- ARM
: overflow                          0000256C  Local -- ARM
: tests                             00002570  Local -- ARM
: wait                              000025B8  Local -- ARM
: unpush                            000025BC  Local -- ARM
: waitloop                          000025CC  Local -- ARM
: unpush2                           000025DC  Local -- ARM
: APushed                           000025F4  Local -- ARM
: APushedAt                         000025F8  Local -- ARM
: Mem_Inc                           000025FC  Local -- ARM
: wipeline                          00002600  Local -- ARM
: bcd_convert                       00002608  Local -- ARM
: bcd_loop                          00002618  Local -- ARM
: bcd_out                           00002634  Local -- ARM
: dec_table                         00002644  Local -- ARM
: divide                            0000266C  Local -- ARM
: divide1                           00002678  Local -- ARM
: hexprint                          00002698  Local -- ARM
: hexprint_sub                      000026D0  Local -- ARM
: tempCharPos                       00002708  Local -- ARM
: nullchar                          00002709  Local -- ARM
: printc                            0000270C  Local -- ARM
: next                              0000274C  Local -- ARM
: high                              00002794  Local -- ARM
: low                               000027A8  Local -- ARM
: POSTEND                           000027BC  Local -- ARM
: printstr                          00002830  Local -- ARM
: printnextc                        0000283C  Local -- ARM
: control                           00002864  Local -- ARM
: c_backspace                       0000289C  Local -- ARM
: subtract                          000028C0  Local -- ARM
: quitcontrol                       000028C4  Local -- ARM
: c_HT                              000028DC  Local -- ARM
: c_LF                              0000290C  Local -- ARM
: c_VT                              00002928  Local -- ARM
: c_FF                              00002944  Local -- ARM
: screenblankloop                   00002950  Local -- ARM
: c_CR                              0000297C  Local -- ARM
: exitstring                        00002990  Local -- ARM
